{"data":{"github":{"repository":{"issue":{"number":6,"title":"Disable dynamic import code splitting","bodyHTML":"<p>Code splitting for dynamic import is great. However, incremental build spend much more time if there are too many chunks to split. So it would be perfect if we use eager mode for development and lazy mode for production.</p>\n<p>Bad news: right now, you can only set webpackMode per import expression like this:</p>\n<pre><code>import(\n  /* webpackMode: \"lazy\" */\n  'module'\n);\n</code></pre>\n<p>First try:</p>\n<pre><code>if (process.env.NODE_ENV === 'production') {\n  import(\n    /* webpackMode: \"lazy\" */\n    'module'\n  );\n} else {\n  import(\n    /* webpackMode: \"eager\" */\n    'module'\n  );\n}\n</code></pre>\n<p>Turn out, this just getting worse. Clearly the bundler doesn't respect <code>process.env.NODE_ENV</code> here.</p>\n<p>Workaround:<br>\nUsing NormalModuleReplacementPlugin to load different file in different env.</p>\n<pre><code>new webpack.NormalModuleReplacementPlugin(/\\.\\/lazy-load-import$/, function(resource) {\n  resource.request = resource.request.replace(/lazy/, 'eager');\n})\n</code></pre>\n<p>Then put different logic in lazy-load-import.js and eager-load-import.js</p>","createdAt":"2018-12-11T12:15:02Z","labels":{"edges":[{"node":{"name":"post"}},{"node":{"name":"webpack"}}]}}}}},"pageContext":{"slug":6}}