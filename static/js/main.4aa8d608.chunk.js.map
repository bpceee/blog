{"version":3,"sources":["components/PostList.module.css","components/App.module.css","components/DumbPost.module.css","components/PostTags.module.css","components/Navbar.module.css","serviceWorker.js","components/PostTags.js","components/PostDate.js","components/DumbPost.js","utils/index.js","components/About.js","components/Navbar.js","components/Post.js","components/PostList.js","components/App.js","index.js"],"names":["module","exports","header","list","postTitleLink","date","app","main","footer","meta","tag","navbar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","PostTags","_ref","tags","filter","_ref2","node","name","map","_ref3","idx","react_default","a","createElement","Fragment","key","Link","className","styles","to","concat","PostDate","dateString","elemProps","Object","objectWithoutProperties","splits","Date","toString","substring","split","unshift","splice","transformedDataString","join","DumbPost","setBodyRef","ele","lastEle","getLastElement","lastElementChild","observer","IntersectionObserver","entries","intersectionRatio","_this","loadUtterance","unobserve","threshold","observe","document","title","this","props","post","utteranceScript","remove","utterances","querySelector","script","src","setAttribute","process","number","async","appendChild","markup","createdAt","components_PostDate","labels","edges","length","components_PostTags","ref","dangerouslySetInnerHTML","bodyHTML","__html","React","Component","About","react_apollo_browser_umd","query","gql","_templateObject","loading","data","repository","issues","components_DumbPost","Navbar","NavLink","exact","Post","Post_templateObject","params","id","issue","PostList","PostList_templateObject","App","components_Navbar","Switch","Route","path","component","href","rel","target","client","ApolloClient","uri","headers","authorization","ReactDOM","render","BrowserRouter","basename","components_App","getElementById","URL","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4aa8d608.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"PostList_header__LXSMx\",\"list\":\"PostList_list__3T5yt\",\"postTitleLink\":\"PostList_postTitleLink__1ZVaj\",\"date\":\"PostList_date__1dAr5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1mW4O\",\"main\":\"App_main__1rqMa\",\"footer\":\"App_footer__1osVG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"meta\":\"DumbPost_meta__2ihfS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tag\":\"PostTags_tag__1pEhm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1LRWh\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./PostTags.module.css\";\n\nconst PostTags = ({tags}) => \n  tags\n  .filter(({node: tag}) => tag.name !== \"post\")\n  .map(({node: tag}, idx) => (\n    <React.Fragment key={idx}>\n      {\" \"}\n      <Link className={styles.tag} to={`/posts/tags/${tag.name}`}>{tag.name}</Link>\n    </React.Fragment>\n  ));\n\n  export default PostTags;","import React from 'react';\n\nconst PostDate = ({dateString, ...elemProps}) => {\n  const splits = new Date(dateString).toString().substring(4, 15).split(' ');\n  splits.unshift(splits.splice(1, 1))\n  const transformedDataString = splits.join(' ');\n  return <span {...elemProps}>{transformedDataString}</span>\n}\n\n  export default PostDate;","import React from 'react';\nimport 'github-markdown-css/github-markdown.css'\nimport { createMarkup, getLastElement } from '../utils';\nimport styles from './DumbPost.module.css';\nimport PostTags from \"./PostTags\";\nimport PostDate from \"./PostDate\";\n\n\nclass DumbPost extends React.Component {\n\n  componentDidMount () {\n    document.title = this.props.post.title;\n  }  \n\n  componentWillUnmount() {\n    if (this.utteranceScript) {\n      this.utteranceScript.remove();\n      const utterances = document.querySelector(\".utterances\");\n      utterances && utterances.remove();\n    }\n  }\n\n  loadUtterance() {\n    const main = document.querySelector(\"main\");\n    const script = document.createElement(\"script\");\n    script.src = \"https://utteranc.es/client.js\";\n    script.setAttribute('repo', `${process.env.REACT_APP_USERNAME}/${process.env.REACT_APP_REPO}`);\n    script.setAttribute('issue-number', this.props.post.number);\n    script.async = true;\n    main.appendChild(script);\n    this.utteranceScript = script;\n  };\n\n  setBodyRef = ele => {\n    if (!ele) {\n      return;\n    }\n    if (window[\"IntersectionObserver\"]) {\n      const lastEle = getLastElement(ele);\n      const observer = new IntersectionObserver((entries) => {\n        if (entries[0].intersectionRatio <= 0) {\n          return;\n        }\n        this.loadUtterance();\n        observer.unobserve(lastEle);\n      }, {threshold: 1});\n      observer.observe(lastEle);\n    } else {\n      this.loadUtterance();\n    }\n  };\n\n  render() {\n    const {post} = this.props;\n    return (\n      <article>\n        {post.createdAt && // don't show header for \"About\" page\n          <header>\n            <h1>{post.title}</h1>  \n             <p className={styles.meta}>\n              Published <PostDate dateString={post.createdAt}/>\n              {post.labels && post.labels.edges.length > 1 &&\n                <React.Fragment>\n                  {\" \"}· tagged with\n                  <PostTags tags={post.labels.edges} />\n                </React.Fragment>\n              }\n            </p>\n          </header>\n        }\n        <div className=\"markdown-body\" ref={this.setBodyRef} dangerouslySetInnerHTML={createMarkup(post.bodyHTML)}></div> \n      </article>\n    );\n  }\n}\n\nexport default DumbPost;","export function createMarkup(markup) {\n  return {__html: markup};\n}\n\nexport function getLastElement(ele) {\n  if (!ele || !ele.lastElementChild) return ele;\n  return getLastElement(ele.lastElementChild);\n}\n","import React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport DumbPost from './DumbPost';\n\nconst About = () => (\n  <Query\n    query={gql`\n      query {\n        repository(owner:\"${process.env.REACT_APP_USERNAME}\", name:\"${process.env.REACT_APP_REPO}\") {\n          issues(last:1, labels:\"about\") {\n            edges {\n              node {\n                title\n                number\n                bodyHTML\n              }\n            }\n          }\n        }\n      }\n    `}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <span>Loading...</span>;\n      if (error) return <span>Error :(</span>;\n\n      const post = data.repository.issues.edges[0].node || {bodyHTML: `<div>Nothing here!<div>`};\n      return <DumbPost post={post}/>\n    }}\n  </Query>\n)\n\nexport default About;","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport styles from './Navbar.module.css';\n\nconst Navbar = () => (\n  <nav className={styles.navbar}>\n    <NavLink exact to={'/'}> Home </NavLink>\n    <NavLink to={'/about'}> About </NavLink>\n  </nav>  \n)\n\nexport default Navbar;","\nimport React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport DumbPost from './DumbPost';\n\nconst Post = ({ match }) => (\n  <Query\n    query={gql`\n      query {\n        repository(owner:\"${process.env.REACT_APP_USERNAME}\", name:\"${process.env.REACT_APP_REPO}\") {\n          issue(number:${match.params.id}) {\n            number\n            title\n            bodyHTML\n            createdAt\n            labels(first: 10) {\n              edges {\n                node { \n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <span>Loading...</span>;\n      if (error) return <span>Not Found :(</span>;\n      return <DumbPost post={data.repository.issue}/>\n    }}\n  </Query>\n)\n\nexport default Post;","\nimport React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Link } from \"react-router-dom\";\n\nimport styles from \"./PostList.module.css\";\nimport PostTags from \"./PostTags\";\nimport PostDate from \"./PostDate\";\n\nclass PostList extends React.Component {\n  \n  componentDidMount () {\n    document.title = process.env.REACT_APP_TITLE;\n  }\n\n  render () {\n    // TODO: add pagination\n    const tag = this.props.match.params.tag || \"post\";\n    return <Query\n      query={gql`\n        query {\n          repository(owner:\"${process.env.REACT_APP_USERNAME}\", name:\"${process.env.REACT_APP_REPO}\") {\n            issues(last:100, labels:\"${tag}\", orderBy: {field: CREATED_AT, direction: DESC}) {\n              edges {\n                node {\n                  title\n                  number\n                  createdAt\n                  labels(first: 10) {\n                    edges {\n                      node { \n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n    >\n      {({ loading, error, data }) => {\n        if (loading) return <span>Loading...</span>;\n        if (error) return <span>Error :(</span>;\n\n        const {tag} = this.props.match.params;\n        \n        return (\n          <React.Fragment>\n            { tag &&\n              <h1 className={styles.header}>Blog posts tagged \"{tag}\"</h1>\n            }\n            <ul className={styles.list}>\n              {data.repository.issues.edges.map(({node: post}) => (\n                <li key={post.number}>\n                  <PostDate dateString={post.createdAt} className={styles.date}></PostDate>\n                  <Link className={styles.postTitleLink} to={`/posts/${post.number}`}>{post.title}</Link>\n                  <PostTags tags={post.labels.edges} />\n                </li>\n              ))}\n            </ul>\n          </React.Fragment>\n        );\n      }}\n    </Query>;\n  }\n}\n\nexport default PostList;","import React, { Component } from 'react';\nimport { Switch, Route } from \"react-router-dom\";\n\nimport About from './About';\nimport Navbar from './Navbar';\nimport Post from './Post';\nimport PostList from './PostList';\nimport styles from './App.module.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={styles.app}>\n        <Navbar/>\n        <main className={styles.main}>\n          <Switch>\n            <Route exact path=\"/\" component={PostList} />\n            <Route path=\"/posts/tags/:tag\" component={PostList} />\n            <Route path=\"/posts/:id\" component={Post} />\n            <Route path=\"/about\" component={About} />\n            <Route component={()=>\"Not Found :(\"} />\n          </Switch>\n        </main>\n        <footer className={styles.footer}>\n          <hr/>\n          <small>© 2018 Ken Bi. Powered by <a href=\"https://github.com/bpceee/isblog\" rel=\"noopener noreferrer\" target=\"_blank\">isBlog</a></small>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from \"apollo-boost\";\nimport { BrowserRouter } from 'react-router-dom'\nimport { ApolloProvider } from \"react-apollo\";\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './components/App';\n\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  headers: {\n    authorization: `Bearer ${process.env.REACT_APP_TOKEN}`\n  }\n});\n\nlet basename = '/';\nif (\n  process.env.NODE_ENV === 'production' \n  && `${process.env.REACT_APP_USERNAME}.github.io` !== process.env.REACT_APP_REPO\n) {\n  basename = process.env.REACT_APP_REPO;\n}\n\nReactDOM.render(\n  <BrowserRouter basename={basename}>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>, \n  document.getElementById('root')\n);\n\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}